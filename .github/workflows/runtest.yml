name: Run Playwright Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  setup-and-run-tests:
    runs-on: ubuntu-latest  # Use an Ubuntu runner for the tests
    strategy:
      fail-fast: false

    steps:
      # Step 1: Checkout code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Set up Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Specify your Node.js version

      - name: Setup Node.js
        run : rm -rf node_modules package-lock.json

      - name: Install Dependencies
        run: npm cache clean --force

      # Step 3: Install dependencies
      - name: Install Dependencies
        run: npm install

      - name: List installed dependecie
        run: npm list

      - name: Install Playwright dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libglib2.0-0 libnss3 libgdk-pixbuf2.0-0 libx11-xcb1 \
            libatk-bridge2.0-0 libatk1.0-0 libcups2 libxcomposite1 \
            libxdamage1 libxrandr2 libasound2 libgbm1 libpango-1.0-0 \
            libgtk-3-0 libxtst6 libnss3 libxss1 libgdk-pixbuf2.0-0 \
            libappindicator3-1 libgdk-pixbuf2.0-0 libcanberra-gtk-module

      # Step 4: Install Playwright Browsers
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      # Step 5: Install jackd2 driver
      - name: Install jackd2 driver
        run: sudo apt install jackd2

      # Step 6: Run Tests
      - name: Run Tests
        run: npx cucumber-js --format progress

      - name: Load test report history
        uses: actions/checkout@v3
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      - name: Build test report
        uses: simple-elf/allure-report-action@v1.7
        if: always()
        with:
          gh_pages: gh-pages
          allure_history: allure-history
          allure_results: build/allure-results

      - name: Publish test report
        uses: peaceiris/actions-gh-pages@v3
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-history


  generate-report:
    # Merge reports after playwright tests, even if some shards have failed
    if: always()
    needs: [setup-and-run-tests]
    runs-on: ubuntu-latest

    steps:

    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: 20
    - name: Install dependencies
      run: npm ci

    - name: AWS cli setup
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-north-1

    # We want a unique identifier to be used when we create subdirectories on our cloud for reports 
    - name: Set a timestamp
      id: timestampid
      # this will store current time with UTC in outputs.timestamp (eg of value: 20231028_233147Z)
      run: echo "timestamp=$(date --utc +%Y%m%d_%H%M%SZ)" >> "$GITHUB_OUTPUT" 

    - name: Download allure results from GitHub Actions Artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: allure-results* # pattern for multiple files previously stored as artifacts 
        merge-multiple: true
        path: merged-allure-results # name of the folder where ALL results will be extracted

    # If you put the current history inside allure-results, Allure can generate a report that will merge history files
    - name: Download current history files from S3
      run: aws s3 cp s3://audirietestreports/history/ ./merged-allure-results/history --recursive

    - name: Generate Allure report 
      run: npx allure generate ./merged-allure-results

    # Copy the history to the same S3 bucket to overwrite the previous history files with updated history
    - name: Backup the history with the latest data
      run: aws s3 cp ./allure-report/history s3://audirietestreports/history/  --recursive

    - name: Deploy html report to S3
      run: aws s3 cp ./allure-report s3://audirietestreports/report/${{ steps.timestampid.outputs.timestamp }}/ --recursive

    - name: Write URL in summary
      run: echo "### Test results - http://audirietestreports.s3-website.eu-north-1.amazonaws.com/report/${{ steps.timestampid.outputs.timestamp }}/index.html" >> $GITHUB_STEP_SUMMARY

