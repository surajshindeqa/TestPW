/// <reference types="node" />
import { TagStruct } from './packet';
import { Props } from './props';
import { PA_COMMAND } from './command';
export declare enum PA_SUBSCRIPTION_MASK {
    NULL = 0,
    SINK = 1,
    SOURCE = 2,
    SINK_INPUT = 4,
    SOURCE_OUTPUT = 8,
    MODULE = 16,
    CLIENT = 32,
    SAMPLE_CACHE = 64,
    SERVER = 128,
    AUTOLOAD = 256,
    CARD = 512,
    ALL = 767
}
declare type EventOperation = "new" | "change" | "remove";
declare type EventFacility = "sink" | "source" | "sink_input" | "source_output" | "module" | "client" | "sample_cache" | "server" | "autoload" | "card";
export declare class Event extends TagStruct {
    type: PA_COMMAND | string;
    constructor(header: Buffer | null, body: Buffer | null);
}
export declare class SubscribeEvent extends Event {
    event: number;
    operation: EventOperation;
    facility: EventFacility;
    index: number;
    constructor(header: Buffer | null, body: Buffer | null);
}
export declare class StreamEvent extends Event {
    index: number;
    event?: string | null;
    properties?: Props;
    suspended?: boolean;
    configuredSinkLatency?: bigint;
    buffer?: {
        maximumLength?: number;
        targetLength?: number;
        preBuffering?: number;
        minimumRequest?: number;
        fragmentSize?: number;
    };
    configuredSourceLatency?: bigint;
    requestedBytes?: number;
    offset?: bigint;
    destination?: {
        index: number;
        name: string | null;
        suspended: boolean;
    };
    constructor(header: Buffer | null, body: Buffer | null);
    parsePlaybackBuffer(): void;
    parseDestination(): void;
}
export {};
