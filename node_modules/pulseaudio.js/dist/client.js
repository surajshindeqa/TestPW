"use strict";
// Copyright (c) 2019-2021 Jan Janak <jan@janakj.org>
//
// Permission to use, copy, modify, and/or distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PulseAudio = exports.getDefaultAppProps = void 0;
var os_1 = require("os");
var events_1 = require("events");
var fs_1 = require("fs");
var net_1 = require("net");
var error_1 = require("./error");
var packet_1 = require("./packet");
var command_1 = require("./command");
var event_1 = require("./event");
var defs_1 = require("./defs");
var Cmd = require("./command");
var debug = defs_1.logger.extend('client');
var machineId = function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
    switch (_a.label) {
        case 0: return [4 /*yield*/, fs_1.promises.readFile('/etc/machine-id', 'ascii')];
        case 1: return [2 /*return*/, (_a.sent()).trim()];
    }
}); }); };
function connect(sock) {
    return new Promise(function (resolve, reject) {
        var onError = function (error) {
            sock.off('connect', onConnect);
            reject(error);
        };
        var onConnect = function () {
            sock.off('close', onError);
            sock.off('error', onError);
            resolve(sock);
        };
        sock.once('connect', onConnect);
        sock.once('error', onError);
        sock.once('close', onError);
    });
}
function getDefaultAppProps(appName) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, appId, appVersion, data, _b, error_2;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _a = process.env, appId = _a.npm_package_name, appVersion = _a.npm_package_version;
                    data = {
                        process: {
                            id: "" + process.pid,
                            binary: "" + process.argv.join(' '),
                            user: "" + (0, os_1.userInfo)().username,
                            host: "" + (0, os_1.hostname)()
                        }
                    };
                    _c.label = 1;
                case 1:
                    _c.trys.push([1, 3, , 4]);
                    _b = data.process;
                    return [4 /*yield*/, machineId()];
                case 2:
                    _b.machine_id = _c.sent();
                    return [3 /*break*/, 4];
                case 3:
                    error_2 = _c.sent();
                    if (error_2.code !== 'ENOENT')
                        throw error_2;
                    return [3 /*break*/, 4];
                case 4:
                    if (appName)
                        data.name = appName;
                    if (appId)
                        data.id = appId;
                    if (appVersion)
                        data.version = appVersion;
                    return [2 /*return*/, data];
            }
        });
    });
}
exports.getDefaultAppProps = getDefaultAppProps;
function loadCookie() {
    return __awaiter(this, void 0, void 0, function () {
        var error_3;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    debug("Trying to load PulseAudio authentication cookie from '" + defs_1.cookieFile + "'");
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, fs_1.promises.readFile(defs_1.cookieFile)];
                case 2: return [2 /*return*/, _a.sent()];
                case 3:
                    error_3 = _a.sent();
                    if (error_3.code === 'ENOENT') {
                        debug("PulseAudio cookie file '" + defs_1.cookieFile + "' not found");
                        return [2 /*return*/, undefined];
                    }
                    throw error_3;
                case 4: return [2 /*return*/];
            }
        });
    });
}
var PulseAudio = /** @class */ (function (_super) {
    __extends(PulseAudio, _super);
    function PulseAudio(appProps, cookie, sockPath) {
        var _this = _super.call(this) || this;
        _this.eventName = /^event(\.|$)/;
        _this.streams = {
            playback: {},
            record: {},
            upload: {}
        };
        _this.protocol = defs_1.PA_NO_VALUE;
        _this.header = null;
        _this.packetLength = null;
        _this.eventListeners = 0;
        _this.sockPath = sockPath || defs_1.defaultSockPath;
        _this.cookie = cookie;
        if (typeof appProps === 'string' || typeof appProps === 'undefined') {
            // If appProps is a string, use that as the application's name. If
            // set to undefined, PulseAudio server will set a default name. In
            // both cases call getApplicationProps to build the default set of
            // application properties.
            _this.getAppProps = function () { return getDefaultAppProps(appProps); };
        }
        else if (typeof appProps === 'object') {
            // If appProps is an object, assume the caller provided a complete
            // set of application properties. Wrap those in a getter function to
            // be invoked from the connect method.
            _this.getAppProps = function () { return appProps; };
        }
        else {
            // If appProps is a function, store it as a callback to be invoked
            // from the connect method.
            _this.getAppProps = appProps;
        }
        _this._read = _this._read.bind(_this);
        _this._closed = _this._closed.bind(_this);
        _this.requests = Object.create(null);
        _this._newListener = _this._newListener.bind(_this);
        _this._removeListener = _this._removeListener.bind(_this);
        _this.on('newListener', _this._newListener);
        _this.on('removeListener', _this._removeListener);
        return _this;
    }
    PulseAudio.prototype._newListener = function (event) {
        if (!this.eventName.test(event))
            return;
        if (++this.eventListeners === 1) {
            debug("Subscribing to PulseAudio events");
            this._subscribe(event_1.PA_SUBSCRIPTION_MASK.ALL);
        }
    };
    PulseAudio.prototype._removeListener = function (event) {
        if (!this.eventName.test(event))
            return;
        if (--this.eventListeners === 0) {
            debug("Unsubscribing from PulseAudio events");
            this._subscribe(event_1.PA_SUBSCRIPTION_MASK.NULL);
        }
    };
    PulseAudio.prototype.connect = function (clientProps) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _c, server, props;
            var _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        debug("Connecting to PulseAudio via '" + this.sockPath + "'");
                        this.packetLength = null;
                        this.header = null;
                        this.sock = (0, net_1.createConnection)(this.sockPath);
                        this.sock.on('readable', this._read);
                        this.sock.once('close', this._closed);
                        this.sock.once('error', this._closed);
                        return [4 /*yield*/, connect(this.sock)];
                    case 1:
                        _e.sent();
                        _a = this;
                        _b = this._authenticate;
                        _c = this.cookie;
                        if (_c) return [3 /*break*/, 3];
                        return [4 /*yield*/, loadCookie()];
                    case 2:
                        _c = (_e.sent());
                        _e.label = 3;
                    case 3: return [4 /*yield*/, _b.apply(this, [_c, defs_1.PA_NATIVE_PROTOCOL_VERSION])];
                    case 4:
                        _a.protocol = _e.sent();
                        return [4 /*yield*/, this.getServerInfo()];
                    case 5:
                        server = _e.sent();
                        debug("Connected to " + server.name + " " + server.version + " speaking native protocol versions <= " + this.protocol);
                        // This PulseAudio client currently does not support any older protocol
                        // versions, so bail early if we are connected to an older PulseAudio
                        // server.
                        if (this.protocol < defs_1.PA_NATIVE_PROTOCOL_VERSION)
                            throw new Error("The client requires native protocol >= " + defs_1.PA_NATIVE_PROTOCOL_VERSION);
                        if (!(typeof clientProps === 'undefined')) return [3 /*break*/, 7];
                        _d = {};
                        return [4 /*yield*/, this.getAppProps()];
                    case 6:
                        props = (_d.application = _e.sent(), _d);
                        return [3 /*break*/, 10];
                    case 7:
                        if (!(typeof clientProps === 'object')) return [3 /*break*/, 8];
                        props = Object.assign(clientProps);
                        return [3 /*break*/, 10];
                    case 8: return [4 /*yield*/, clientProps()];
                    case 9:
                        props = _e.sent();
                        _e.label = 10;
                    case 10: return [4 /*yield*/, this.setClientProperties(props)];
                    case 11:
                        _e.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    PulseAudio.prototype.disconnect = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                if (this._disconnecting)
                    return [2 /*return*/, this._disconnecting];
                if (!this.sock)
                    return [2 /*return*/, undefined];
                this.sock.end();
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        _this._disconnecting = { resolve: resolve, reject: reject };
                    })];
            });
        });
    };
    PulseAudio.prototype._closed = function () {
        var error = new Error('Disconnected from PulseAudio');
        this._abort(error);
        this.sock.end();
        this.sock.off('readable', this._read);
        this.sock.off('close', this._closed);
        this.sock.off('error', this._closed);
        delete this.sock;
        if (this._disconnecting) {
            this._disconnecting.resolve();
            delete this._disconnecting;
        }
        else {
            // If we were not asked by the user to disconnect from PulseAudio, emit an
            // error event to bring down the application
            this.emit('error', error);
        }
    };
    PulseAudio.prototype._abort = function (error) {
        for (var _i = 0, _a = Object.values(this.streams); _i < _a.length; _i++) {
            var t = _a[_i];
            for (var _b = 0, _c = Object.values(t); _b < _c.length; _b++) {
                var s = _c[_b];
                s.emit('error', error);
            }
        }
        for (var _d = 0, _e = Object.values(this.requests); _d < _e.length; _d++) {
            var reject = _e[_d].reject;
            reject(error);
        }
        this.requests = Object.create(null);
    };
    PulseAudio.prototype._parse = function (header, body) {
        var msg, stream, arg;
        var channel = header.readUInt32BE(packet_1.PA_STREAM_DESCRIPTOR.CHANNEL * 4);
        if (channel !== defs_1.PA_NO_INDEX) {
            // Incoming memory block. Lookup the corresponding recording stream and
            // pass the memory block to it.
            stream = this.streams.record[channel];
            if (stream)
                stream._onData(new packet_1.MemoryBlock(header, body));
            return;
        }
        if ((body.length < 5) || (body[0] !== packet_1.PA_TAG.U32))
            throw new Error("Got malformed packet from PulseAudio");
        var type = body.readUInt32BE(1);
        switch (type) {
            case command_1.PA_COMMAND.REPLY:
            case command_1.PA_COMMAND.ERROR:
                // A response to a command issued by the client. Lookup the command and
                // fullfill its promise.
                msg = new command_1.Command(body, header);
                if (msg.tag === defs_1.PA_NO_TAG)
                    throw new Error('Error/reply packet is missing tag');
                if (!(msg.tag in this.requests))
                    throw new Error('Received unknown tag from PulseAudio');
                if (msg.type === command_1.PA_COMMAND.REPLY)
                    this.requests[msg.tag].resolve(msg);
                else
                    this.requests[msg.tag].reject(new error_1.PulseError(msg));
                delete this.requests[msg.tag];
                break;
            case command_1.PA_COMMAND.SUBSCRIBE_EVENT:
                // An incoming event from PulseAudio server notifying the client of
                // changes to the objects managed by the server. Emit the corresponding
                // event on the PulseAudio object.
                msg = new event_1.SubscribeEvent(header, body);
                arg = {
                    index: msg.index,
                    event: msg.event,
                    facility: msg.facility,
                    operation: msg.operation
                };
                // The handlers for the following events get all attributes from the event
                // via an object in the first argument
                this.emit('event', arg);
                this.emit("event." + msg.facility, arg);
                this.emit("event." + msg.operation, arg);
                // The handlers for the full event name get the index in the first argument
                // and the PulseAudio event number  in the second argument
                this.emit("event." + msg.facility + "." + msg.operation, msg.index, msg.event);
                debug("event." + msg.facility + "." + msg.operation + "(" + msg.index + ")");
                break;
            case command_1.PA_COMMAND.PLAYBACK_STREAM_EVENT:
            case command_1.PA_COMMAND.PLAYBACK_STREAM_SUSPENDED:
            case command_1.PA_COMMAND.PLAYBACK_STREAM_MOVED:
            case command_1.PA_COMMAND.PLAYBACK_STREAM_KILLED:
            case command_1.PA_COMMAND.PLAYBACK_BUFFER_ATTR_CHANGED:
            case command_1.PA_COMMAND.STARTED:
            case command_1.PA_COMMAND.REQUEST:
            case command_1.PA_COMMAND.UNDERFLOW:
            case command_1.PA_COMMAND.OVERFLOW:
                msg = new event_1.StreamEvent(header, body);
                stream = this.streams.playback[msg.index];
                if (stream)
                    stream._onEvent(msg);
                break;
            case command_1.PA_COMMAND.RECORD_STREAM_EVENT:
            case command_1.PA_COMMAND.RECORD_STREAM_SUSPENDED:
            case command_1.PA_COMMAND.RECORD_STREAM_MOVED:
            case command_1.PA_COMMAND.RECORD_STREAM_KILLED:
            case command_1.PA_COMMAND.RECORD_BUFFER_ATTR_CHANGED:
                msg = new event_1.StreamEvent(header, body);
                stream = this.streams.record[msg.index];
                if (stream)
                    stream._onEvent(msg);
                break;
            default:
                throw new Error("Unsupported packet type " + type);
        }
    };
    PulseAudio.prototype._read = function () {
        for (;;) {
            try {
                if (this.packetLength === null) {
                    this.header = this.sock.read(packet_1.PA_STREAM_DESCRIPTOR_SIZE);
                    if (this.header === null)
                        return;
                    if (this.header.length !== packet_1.PA_STREAM_DESCRIPTOR_SIZE)
                        throw new Error('Malformed packet received from PulseAudio');
                    this.packetLength = this.header.readUInt32BE();
                }
                var body = this.sock.read(this.packetLength);
                if (body === null)
                    return;
                if (body.length !== this.packetLength)
                    throw new Error('Malformed packet received from PulseAudio');
                if (this.header === null)
                    throw new Error('Bug in PulseAudio client (header === null)');
                this._parse(this.header, body);
                this.packetLength = null;
                this.header = null;
            }
            catch (error) {
                this.emit('error', error);
                return;
            }
        }
    };
    PulseAudio.prototype._invoke = function (cmd) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, new Promise(function (resolve, reject) {
                            _this.requests[cmd.tag] = { resolve: resolve, reject: reject };
                            cmd.finalize().forEach(function (data) { return _this.sock.write(data); });
                        })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    // Internal methods
    PulseAudio.prototype._authenticate = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var c, _a, _b;
            var _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        c = new ((_c = Cmd.Auth).bind.apply(_c, __spreadArray([void 0], args, false)))();
                        _b = (_a = c).processResponse;
                        return [4 /*yield*/, this._invoke(c)];
                    case 1: return [2 /*return*/, _b.apply(_a, [_d.sent()])];
                }
            });
        });
    };
    PulseAudio.prototype._subscribe = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this._invoke(new ((_a = Cmd.Subscribe).bind.apply(_a, __spreadArray([void 0], args, false)))())];
                    case 1:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    // Client-related methods
    PulseAudio.prototype.setClientProperties = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var c, _a, _b;
            var _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        c = new ((_c = Cmd.SetClientName).bind.apply(_c, __spreadArray([void 0], args, false)))();
                        _b = (_a = c).processResponse;
                        return [4 /*yield*/, this._invoke(c)];
                    case 1: return [2 /*return*/, _b.apply(_a, [_d.sent()])];
                }
            });
        });
    };
    // Server-related methods
    PulseAudio.prototype.getServerInfo = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var c, _a, _b;
            var _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        c = new ((_c = Cmd.GetServerInfo).bind.apply(_c, __spreadArray([void 0], args, false)))();
                        _b = (_a = c).processResponse;
                        return [4 /*yield*/, this._invoke(c)];
                    case 1: return [2 /*return*/, _b.apply(_a, [_d.sent()])];
                }
            });
        });
    };
    PulseAudio.prototype.loadModule = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var c, _a, _b;
            var _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        c = new ((_c = Cmd.LoadModule).bind.apply(_c, __spreadArray([void 0], args, false)))();
                        _b = (_a = c).processResponse;
                        return [4 /*yield*/, this._invoke(c)];
                    case 1: return [2 /*return*/, _b.apply(_a, [_d.sent()])];
                }
            });
        });
    };
    PulseAudio.prototype.unloadModule = function (index) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._invoke(new Cmd.SelectByIndex(command_1.PA_COMMAND.UNLOAD_MODULE, index))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    PulseAudio.prototype.getAllSources = function () {
        return __awaiter(this, void 0, void 0, function () {
            var c, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        c = new Cmd.GetSourceSinkInfoList(command_1.PA_COMMAND.GET_SOURCE_INFO_LIST);
                        _b = (_a = c).processResponse;
                        return [4 /*yield*/, this._invoke(c)];
                    case 1: return [2 /*return*/, _b.apply(_a, [_c.sent()])];
                }
            });
        });
    };
    PulseAudio.prototype.getAllSinks = function () {
        return __awaiter(this, void 0, void 0, function () {
            var c, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        c = new Cmd.GetSourceSinkInfoList(command_1.PA_COMMAND.GET_SINK_INFO_LIST);
                        _b = (_a = c).processResponse;
                        return [4 /*yield*/, this._invoke(c)];
                    case 1: return [2 /*return*/, _b.apply(_a, [_c.sent()])];
                }
            });
        });
    };
    // Audio source (recording) management methods
    PulseAudio.prototype.setDefaultSource = function (name) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._invoke(new Cmd.SelectByName(command_1.PA_COMMAND.SET_DEFAULT_SOURCE, name))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    PulseAudio.prototype.lookupSource = function (name) {
        if (name === void 0) { name = defs_1.PA_DEFAULT_SOURCE; }
        return __awaiter(this, void 0, void 0, function () {
            var c, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        c = new Cmd.Lookup(command_1.PA_COMMAND.LOOKUP_SOURCE, name);
                        _b = (_a = c).processResponse;
                        return [4 /*yield*/, this._invoke(c)];
                    case 1: return [2 /*return*/, _b.apply(_a, [_c.sent()])];
                }
            });
        });
    };
    PulseAudio.prototype.getSourceInfo = function (nameOrIndex) {
        if (nameOrIndex === void 0) { nameOrIndex = defs_1.PA_DEFAULT_SOURCE; }
        return __awaiter(this, void 0, void 0, function () {
            var c, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        c = new Cmd.GetSourceSinkInfo(command_1.PA_COMMAND.GET_SOURCE_INFO, nameOrIndex);
                        _b = (_a = c).processResponse;
                        return [4 /*yield*/, this._invoke(c)];
                    case 1: return [2 /*return*/, _b.apply(_a, [_c.sent()])];
                }
            });
        });
    };
    PulseAudio.prototype.setSourceVolume = function (volumes, nameOrIndex) {
        if (nameOrIndex === void 0) { nameOrIndex = defs_1.PA_DEFAULT_SOURCE; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._invoke(new Cmd.SetVolume(command_1.PA_COMMAND.SET_SOURCE_VOLUME, nameOrIndex, volumes))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    PulseAudio.prototype.setSourceMute = function (mute, nameOrIndex) {
        if (nameOrIndex === void 0) { nameOrIndex = defs_1.PA_DEFAULT_SOURCE; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._invoke(new Cmd.SetMute(command_1.PA_COMMAND.SET_SOURCE_MUTE, nameOrIndex, mute))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    PulseAudio.prototype.setSourceOutputVolume = function (index, volumes) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._invoke(new Cmd.SetVolumeByIndex(command_1.PA_COMMAND.SET_SOURCE_OUTPUT_VOLUME, index, volumes))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    PulseAudio.prototype.setSourceOutputMute = function (index, mute) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._invoke(new Cmd.SetMuteByIndex(command_1.PA_COMMAND.SET_SOURCE_OUTPUT_MUTE, index, mute))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    PulseAudio.prototype.getSourceOutputInfo = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var c, _a, _b;
            var _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        c = new ((_c = Cmd.GetSourceOutputInfo).bind.apply(_c, __spreadArray([void 0], args, false)))();
                        _b = (_a = c).processResponse;
                        return [4 /*yield*/, this._invoke(c)];
                    case 1: return [2 /*return*/, _b.apply(_a, [_d.sent()])];
                }
            });
        });
    };
    PulseAudio.prototype.getSourceOutputList = function () {
        return __awaiter(this, void 0, void 0, function () {
            var c, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        c = new Cmd.GetSourceOutputList(command_1.PA_COMMAND.GET_SOURCE_OUTPUT_INFO_LIST);
                        _b = (_a = c).processResponse;
                        return [4 /*yield*/, this._invoke(c)];
                    case 1: return [2 /*return*/, _b.apply(_a, [_c.sent()])];
                }
            });
        });
    };
    PulseAudio.prototype.moveSourceOutput = function (index, source) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._invoke(new Cmd.Move(command_1.PA_COMMAND.MOVE_SOURCE_OUTPUT, index, source))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    PulseAudio.prototype.createRecordStream = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var c, _a, _b;
            var _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        c = new ((_c = Cmd.CreateRecordStream).bind.apply(_c, __spreadArray([void 0], args, false)))();
                        _b = (_a = c).processResponse;
                        return [4 /*yield*/, this._invoke(c)];
                    case 1: return [2 /*return*/, _b.apply(_a, [_d.sent(), this])];
                }
            });
        });
    };
    // // Audio sink (playback) management methods
    PulseAudio.prototype.setDefaultSink = function (name) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._invoke(new Cmd.SelectByName(command_1.PA_COMMAND.SET_DEFAULT_SINK, name))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    PulseAudio.prototype.lookupSink = function (name) {
        if (name === void 0) { name = defs_1.PA_DEFAULT_SINK; }
        return __awaiter(this, void 0, void 0, function () {
            var c, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        c = new Cmd.Lookup(command_1.PA_COMMAND.LOOKUP_SINK, name);
                        _b = (_a = c).processResponse;
                        return [4 /*yield*/, this._invoke(c)];
                    case 1: return [2 /*return*/, _b.apply(_a, [_c.sent()])];
                }
            });
        });
    };
    PulseAudio.prototype.getSinkInfo = function (nameOrIndex) {
        if (nameOrIndex === void 0) { nameOrIndex = defs_1.PA_DEFAULT_SINK; }
        return __awaiter(this, void 0, void 0, function () {
            var c, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        c = new Cmd.GetSourceSinkInfo(command_1.PA_COMMAND.GET_SINK_INFO, nameOrIndex);
                        _b = (_a = c).processResponse;
                        return [4 /*yield*/, this._invoke(c)];
                    case 1: return [2 /*return*/, _b.apply(_a, [_c.sent()])];
                }
            });
        });
    };
    PulseAudio.prototype.setSinkVolume = function (volumes, nameOrIndex) {
        if (nameOrIndex === void 0) { nameOrIndex = defs_1.PA_DEFAULT_SINK; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._invoke(new Cmd.SetVolume(command_1.PA_COMMAND.SET_SINK_VOLUME, nameOrIndex, volumes))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    PulseAudio.prototype.setSinkMute = function (mute, nameOrIndex) {
        if (nameOrIndex === void 0) { nameOrIndex = defs_1.PA_DEFAULT_SINK; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._invoke(new Cmd.SetMute(command_1.PA_COMMAND.SET_SINK_MUTE, nameOrIndex, mute))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    PulseAudio.prototype.setSinkInputVolume = function (index, volumes) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._invoke(new Cmd.SetVolumeByIndex(command_1.PA_COMMAND.SET_SINK_INPUT_VOLUME, index, volumes))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    PulseAudio.prototype.setSinkInputMute = function (index, mute) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._invoke(new Cmd.SetMuteByIndex(command_1.PA_COMMAND.SET_SINK_INPUT_MUTE, index, mute))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    PulseAudio.prototype.getSinkInputInfo = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var c, _a, _b;
            var _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        c = new ((_c = Cmd.GetSinkInputInfo).bind.apply(_c, __spreadArray([void 0], args, false)))();
                        _b = (_a = c).processResponse;
                        return [4 /*yield*/, this._invoke(c)];
                    case 1: return [2 /*return*/, _b.apply(_a, [_d.sent()])];
                }
            });
        });
    };
    PulseAudio.prototype.getSinkInputList = function () {
        return __awaiter(this, void 0, void 0, function () {
            var c, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        c = new Cmd.GetSinkInputList(command_1.PA_COMMAND.GET_SINK_INPUT_INFO_LIST);
                        _b = (_a = c).processResponse;
                        return [4 /*yield*/, this._invoke(c)];
                    case 1: return [2 /*return*/, _b.apply(_a, [_c.sent()])];
                }
            });
        });
    };
    PulseAudio.prototype.moveSinkInput = function (index, sink) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._invoke(new Cmd.Move(command_1.PA_COMMAND.MOVE_SINK_INPUT, index, sink))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    PulseAudio.prototype.createPlaybackStream = function (opts) {
        if (opts === void 0) { opts = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var c, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        c = new Cmd.CreatePlaybackStream(opts);
                        _b = (_a = c).processResponse;
                        return [4 /*yield*/, this._invoke(c)];
                    case 1: return [2 /*return*/, _b.apply(_a, [_c.sent(), this])];
                }
            });
        });
    };
    // // Sample cache management
    PulseAudio.prototype.createUploadStream = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var c, _a, _b;
            var _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        c = new ((_c = Cmd.CreateUploadStream).bind.apply(_c, __spreadArray([void 0], args, false)))();
                        _b = (_a = c).processResponse;
                        return [4 /*yield*/, this._invoke(c)];
                    case 1: return [2 /*return*/, _b.apply(_a, [_d.sent(), this])];
                }
            });
        });
    };
    PulseAudio.prototype.playSample = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var c, _a, _b;
            var _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        c = new ((_c = Cmd.PlaySample).bind.apply(_c, __spreadArray([void 0], args, false)))();
                        _b = (_a = c).processResponse;
                        return [4 /*yield*/, this._invoke(c)];
                    case 1: return [2 /*return*/, _b.apply(_a, [_d.sent()])];
                }
            });
        });
    };
    PulseAudio.prototype.removeSample = function (name) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._invoke(new Cmd.SelectByName(command_1.PA_COMMAND.REMOVE_SAMPLE, name))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    // PulseAudio clients
    PulseAudio.prototype.getClients = function () {
        return __awaiter(this, void 0, void 0, function () {
            var c, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        c = new Cmd.GetClientsList(command_1.PA_COMMAND.GET_CLIENT_INFO_LIST);
                        _b = (_a = c).processResponse;
                        return [4 /*yield*/, this._invoke(c)];
                    case 1: return [2 /*return*/, _b.apply(_a, [_c.sent()])];
                }
            });
        });
    };
    return PulseAudio;
}(events_1.EventEmitter));
exports.PulseAudio = PulseAudio;
