/// <reference types="node" />
import { FlatProps, Props } from './props';
export declare enum PA_STREAM_DESCRIPTOR {
    LENGTH = 0,
    CHANNEL = 1,
    OFFSET_HI = 2,
    OFFSET_LO = 3,
    FLAGS = 4,
    MAX = 5
}
export declare const PA_STREAM_DESCRIPTOR_SIZE: number;
export interface SampleSpec {
    format: number;
    channels: number;
    rate: number;
}
declare class Packet {
    header: Buffer;
    constructor(header?: Buffer | null);
    setChannel(channel: number): void;
    setLength(length: number): void;
    finalize(): Buffer[];
}
export declare class MemoryBlock extends Packet {
    body: Buffer[];
    constructor(headerOrChannel: Buffer | number, body: Buffer | Buffer[]);
    finalize(): Buffer[];
}
export declare enum PA_TAG {
    INVALID = 0,
    STRING,
    STRING_NULL,
    U32,
    U8,
    U64,
    S64,
    SAMPLE_SPEC,
    ARBITRARY,
    BOOLEAN_TRUE,
    BOOLEAN_FALSE,
    TIMEVAL,
    USEC,
    CHANNEL_MAP,
    CVOLUME,
    PROPLIST,
    VOLUME,
    FORMAT_INFO
}
export declare class TagStruct extends Packet {
    static FRAGMENT_SIZE: number;
    body: Buffer;
    i: number;
    constructor(header?: Buffer | null, body?: Buffer | null);
    alloc(wanted: number): void;
    assert(wanted: number): void;
    finalize(): Buffer[];
    addUInt8(value: number): void;
    getUInt8(): number;
    addUInt32(value: number): void;
    getUInt32(): number;
    addUInt64(value: number | bigint): void;
    getUInt64(): bigint;
    getSInt64(): bigint;
    getUsec(): bigint;
    static stringLength(value: string | null): number;
    addString(value: string | null): void;
    getString(): string | null;
    addArbitrary(value: Buffer): void;
    getArbitrary(): Buffer;
    addBool(value: boolean): void;
    getBool(): boolean;
    static propsLength(props: FlatProps): number;
    addProps(props: Props): void;
    getProps(): Props;
    static cvolumeLength(volumes: number[]): number;
    addCvolume(volumes: number[]): void;
    getCvolume(): number[];
    addVolume(volume: number): void;
    getVolume(): number;
    static sampleSpecLength(): number;
    addSampleSpec({ format, channels, rate }: SampleSpec): void;
    getSampleSpec(): SampleSpec;
    static channelMapLength(map: number[]): number;
    addChannelMap(map: number[]): void;
    getChannelMap(): number[];
    getFormatInfo(): {
        encoding: number;
        properties: Props;
    };
    addFormatInfo(encoding: number, props?: {}): void;
}
export {};
