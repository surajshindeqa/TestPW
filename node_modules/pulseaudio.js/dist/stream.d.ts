/// <reference types="debug" />
/// <reference types="node" />
import { Writable, Readable } from 'stream';
import { MemoryBlock } from './packet';
import { PA_SAMPLE_FORMAT } from './defs';
import { PA_COMMAND } from './command';
import type { PulseAudio } from './client';
import { StreamEvent } from './event';
export declare const sampleSize: {
    0: number;
    2: number;
    1: number;
    3: number;
    4: number;
    5: number;
    6: number;
    7: number;
    8: number;
    9: number;
    10: number;
    11: number;
    12: number;
};
export declare const sampleFormatStr: {
    u8: PA_SAMPLE_FORMAT;
    'u-law': PA_SAMPLE_FORMAT;
    'A-law': PA_SAMPLE_FORMAT;
    S16LE: PA_SAMPLE_FORMAT;
    S16BE: PA_SAMPLE_FORMAT;
    Float32LE: PA_SAMPLE_FORMAT;
    Float32BE: PA_SAMPLE_FORMAT;
    S32LE: PA_SAMPLE_FORMAT;
    S32BE: PA_SAMPLE_FORMAT;
    S24LE: PA_SAMPLE_FORMAT;
    S24BE: PA_SAMPLE_FORMAT;
    S24_32LE: PA_SAMPLE_FORMAT;
    S24_32BE: PA_SAMPLE_FORMAT;
};
export declare function frameSize({ format, channels }: {
    format: PA_SAMPLE_FORMAT;
    channels: number;
}): number;
export declare class PlaybackStream extends Writable {
    pa: PulseAudio;
    dbg: debug.Debugger;
    index: number;
    queue: Buffer[];
    step: number;
    left: number;
    requestedBytes: number;
    callback?: () => void;
    constructor(pulseaudio: PulseAudio, args: any);
    _onEvent(event: StreamEvent): void;
    _enqueued: () => number;
    _wakeup(): void;
    _write(data: Buffer, encoding: any, next: (error?: Error) => void): void;
    _final(done: (error?: Error) => void, cmd?: PA_COMMAND): Promise<void>;
    _destroy(err: Error, callback: (error: Error) => void, cmd?: PA_COMMAND): Promise<void>;
}
export declare class UploadStream extends PlaybackStream {
    constructor(pulseaudio: PulseAudio, args: any);
    _final(done: () => void): Promise<void>;
    _destroy(err: Error, callback: (error: Error) => void): Promise<void>;
}
export declare class RecordStream extends Readable {
    pa: PulseAudio;
    dbg: debug.Debugger;
    index: number;
    _running: boolean;
    left: number | null;
    maximumLength: number;
    constructor(pulseaudio: PulseAudio, args: any);
    _onEvent(event: StreamEvent): void;
    _onData(packet: MemoryBlock): void;
    _read(): void;
    _destroy(err: Error, callback: (error: Error) => void): Promise<void>;
}
