"use strict";
// Copyright (c) 2019-2021 Jan Janak <jan@janakj.org>
//
// Permission to use, copy, modify, and/or distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecordStream = exports.UploadStream = exports.PlaybackStream = exports.frameSize = exports.sampleFormatStr = exports.sampleSize = void 0;
var stream_1 = require("stream");
var error_1 = require("./error");
var packet_1 = require("./packet");
var defs_1 = require("./defs");
var command_1 = require("./command");
exports.sampleSize = (_a = {},
    _a[defs_1.PA_SAMPLE_FORMAT.U8] = 1,
    _a[defs_1.PA_SAMPLE_FORMAT.ULAW] = 1,
    _a[defs_1.PA_SAMPLE_FORMAT.ALAW] = 1,
    _a[defs_1.PA_SAMPLE_FORMAT.S16LE] = 2,
    _a[defs_1.PA_SAMPLE_FORMAT.S16BE] = 2,
    _a[defs_1.PA_SAMPLE_FORMAT.FLOAT32LE] = 4,
    _a[defs_1.PA_SAMPLE_FORMAT.FLOAT32BE] = 4,
    _a[defs_1.PA_SAMPLE_FORMAT.S32LE] = 4,
    _a[defs_1.PA_SAMPLE_FORMAT.S32BE] = 4,
    _a[defs_1.PA_SAMPLE_FORMAT.S24LE] = 3,
    _a[defs_1.PA_SAMPLE_FORMAT.S24BE] = 3,
    _a[defs_1.PA_SAMPLE_FORMAT.S24_32LE] = 4,
    _a[defs_1.PA_SAMPLE_FORMAT.S24_32BE] = 4,
    _a);
// eslint-disable-next-line @typescript-eslint/no-unused-vars
var sampleFormat = (_b = {},
    _b[defs_1.PA_SAMPLE_FORMAT.U8] = 'u8',
    _b[defs_1.PA_SAMPLE_FORMAT.ULAW] = 'u-law',
    _b[defs_1.PA_SAMPLE_FORMAT.ALAW] = 'A-law',
    _b[defs_1.PA_SAMPLE_FORMAT.S16LE] = 'S16LE',
    _b[defs_1.PA_SAMPLE_FORMAT.S16BE] = 'S16BE',
    _b[defs_1.PA_SAMPLE_FORMAT.FLOAT32LE] = 'Float32LE',
    _b[defs_1.PA_SAMPLE_FORMAT.FLOAT32BE] = 'Float32BE',
    _b[defs_1.PA_SAMPLE_FORMAT.S32LE] = 'S32LE',
    _b[defs_1.PA_SAMPLE_FORMAT.S32BE] = 'S32BE',
    _b[defs_1.PA_SAMPLE_FORMAT.S24LE] = 'S24LE',
    _b[defs_1.PA_SAMPLE_FORMAT.S24BE] = 'S24BE',
    _b[defs_1.PA_SAMPLE_FORMAT.S24_32LE] = 'S24_32LE',
    _b[defs_1.PA_SAMPLE_FORMAT.S24_32BE] = 'S24_32BE',
    _b);
exports.sampleFormatStr = {
    'u8': defs_1.PA_SAMPLE_FORMAT.U8,
    'u-law': defs_1.PA_SAMPLE_FORMAT.ULAW,
    'A-law': defs_1.PA_SAMPLE_FORMAT.ALAW,
    'S16LE': defs_1.PA_SAMPLE_FORMAT.S16LE,
    'S16BE': defs_1.PA_SAMPLE_FORMAT.S16BE,
    'Float32LE': defs_1.PA_SAMPLE_FORMAT.FLOAT32LE,
    'Float32BE': defs_1.PA_SAMPLE_FORMAT.FLOAT32BE,
    'S32LE': defs_1.PA_SAMPLE_FORMAT.S32LE,
    'S32BE': defs_1.PA_SAMPLE_FORMAT.S32BE,
    'S24LE': defs_1.PA_SAMPLE_FORMAT.S24LE,
    'S24BE': defs_1.PA_SAMPLE_FORMAT.S24BE,
    'S24_32LE': defs_1.PA_SAMPLE_FORMAT.S24_32LE,
    'S24_32BE': defs_1.PA_SAMPLE_FORMAT.S24_32BE
};
function frameSize(_a) {
    var format = _a.format, channels = _a.channels;
    return exports.sampleSize[format] * channels;
}
exports.frameSize = frameSize;
var PlaybackStream = /** @class */ (function (_super) {
    __extends(PlaybackStream, _super);
    function PlaybackStream(pulseaudio, args) {
        var _this = 
        // Must set emitClose since the PulseAudio object listens for it
        _super.call(this, { highWaterMark: 48000 * 2 * 2, decodeStrings: false, emitClose: true, autoDestroy: true }) || this;
        _this._enqueued = function () { return _this.queue.reduce(function (a, v) { return a + v.length; }, 0); };
        _this.pa = pulseaudio;
        //this.index = PA_NO_INDEX
        _this.requestedBytes = 0;
        _this.index = defs_1.PA_NO_INDEX;
        Object.assign(_this, args);
        if (_this.index === defs_1.PA_NO_INDEX)
            throw new Error('PlaybackStream constructor must be given an index property');
        _this.dbg = defs_1.logger.extend("playback:" + _this.index);
        _this.queue = [];
        // We need to make sure that the data we send to PulseAudio server is
        // aligned at frame boundary.
        _this.step = frameSize(args.sampleSpec);
        // The maximum number of bytes that can be played, obtained from the
        // request's maximumLength property. Set to null if there is no limit.
        _this.left = args.maximumLength;
        return _this;
    }
    PlaybackStream.prototype._onEvent = function (event) {
        if (event.type === 'request') {
            if (typeof event.requestedBytes !== 'number')
                throw new Error('Bug: Missing StreamEvent attribute requestedBytes');
            this.requestedBytes += event.requestedBytes;
            this._wakeup();
            return;
        }
        this.dbg("" + event.type);
        this.emit(event.type, event);
        if (event.type === 'event')
            this.emit(event.type + "." + event.event, event);
        // Destroy the stream if the corresponding object gets killed on PulseAudio
        // server
        if (event.type === 'killed')
            this.destroy(new Error("Stream killed on PulseAudio server"));
    };
    PlaybackStream.prototype._wakeup = function () {
        var _this = this;
        // Calculate how much data we can really send. We cannot send more than
        // this.requestedBytes and have to make sure that all frames we send are
        // complete, i.e., we have to align at the frame byte boundary. Note that
        // the result can be 0 if there is less than this.step bytes of data in the
        // queue.
        var writableLength = Math.min(this._enqueued(), this.requestedBytes);
        var alignedLength = Math.floor(writableLength / this.step) * this.step;
        var data = [];
        var l = alignedLength;
        while (l) {
            if (l >= this.queue[0].length) {
                l -= this.queue[0].length;
                data.push(this.queue.shift());
            }
            else {
                data.push(this.queue[0].slice(0, l));
                this.queue[0] = this.queue[0].slice(l);
                l = 0;
            }
        }
        if (alignedLength > 0) {
            var packet = new packet_1.MemoryBlock(this.index, data);
            packet.finalize().forEach(function (c) { return _this.pa.sock.write(c); });
            this.requestedBytes -= alignedLength;
            if (this.left !== null)
                this.left -= alignedLength;
        }
        if (this.callback) {
            // Invoke the callback if there there is still some space left in the
            // PulseAudio buffer (indicating that we did not have enough data), or if
            // we did not write anything to PulseAudio because we had less than
            // this.step bytes in the internal queue, or if we have reached the
            // maximum number of bytes for the stream.
            if (this.requestedBytes > 0 || alignedLength === 0 || this.left === 0) {
                // Who knows what will be triggered by the callback and when, so first
                // remove it from this object and then invoke it
                var next = this.callback;
                delete this.callback;
                next();
            }
        }
    };
    PlaybackStream.prototype._write = function (data, encoding, next) {
        if (this.left !== null && (this._enqueued() + data.length > this.left)) {
            next(new Error('Maximum number of bytes for the stream reached'));
            return;
        }
        this.queue.push(data);
        if (typeof this.callback !== 'undefined')
            throw new Error('Bug: Already have a stored callback');
        this.callback = next;
        this._wakeup();
    };
    PlaybackStream.prototype._final = function (done, cmd) {
        if (cmd === void 0) { cmd = command_1.PA_COMMAND.DRAIN_PLAYBACK_STREAM; }
        return __awaiter(this, void 0, void 0, function () {
            var error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        this.dbg('draining...');
                        return [4 /*yield*/, this.pa._invoke(new command_1.SelectByIndex(cmd, this.index))];
                    case 1:
                        _a.sent();
                        this.dbg("drained");
                        return [3 /*break*/, 3];
                    case 2:
                        error_2 = _a.sent();
                        this.dbg("drain error: " + error_2);
                        done(error_2);
                        return [2 /*return*/];
                    case 3:
                        done();
                        return [2 /*return*/];
                }
            });
        });
    };
    PlaybackStream.prototype._destroy = function (err, callback, cmd) {
        if (cmd === void 0) { cmd = command_1.PA_COMMAND.DELETE_PLAYBACK_STREAM; }
        return __awaiter(this, void 0, void 0, function () {
            var error_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, 3, 4]);
                        this.dbg("destroying...");
                        return [4 /*yield*/, this.pa._invoke(new command_1.SelectByIndex(cmd, this.index))];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 2:
                        error_3 = _a.sent();
                        // For some reason, older PulseAudio versions return the wrong error code PA_ERR_EXIST
                        // when the stream being deleted does not exist, so we need to check both
                        // error codes here.
                        if (!(error_3.code === error_1.PA_ERR.NOENTITY || error_3.code === error_1.PA_ERR.EXIST)) {
                            this.dbg("destroy error: " + error_3);
                            err = error_3;
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        this.dbg("destroyed");
                        callback(err);
                        return [7 /*endfinally*/];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    return PlaybackStream;
}(stream_1.Writable));
exports.PlaybackStream = PlaybackStream;
var UploadStream = /** @class */ (function (_super) {
    __extends(UploadStream, _super);
    function UploadStream(pulseaudio, args) {
        var _this = _super.call(this, pulseaudio, args) || this;
        _this.dbg = defs_1.logger.extend("upload:" + _this.index);
        return _this;
    }
    UploadStream.prototype._final = function (done) {
        return _super.prototype._final.call(this, done, command_1.PA_COMMAND.FINISH_UPLOAD_STREAM);
    };
    UploadStream.prototype._destroy = function (err, callback) {
        return _super.prototype._destroy.call(this, err, callback, command_1.PA_COMMAND.DELETE_UPLOAD_STREAM);
    };
    return UploadStream;
}(PlaybackStream));
exports.UploadStream = UploadStream;
var RecordStream = /** @class */ (function (_super) {
    __extends(RecordStream, _super);
    function RecordStream(pulseaudio, args) {
        var _this = _super.call(this, { autoDestroy: true }) || this;
        _this.pa = pulseaudio;
        _this.index = defs_1.PA_NO_INDEX;
        _this.maximumLength = defs_1.PA_NO_VALUE;
        Object.assign(_this, args);
        if (_this.index === defs_1.PA_NO_INDEX)
            throw new Error('RecordStream constructor must be given an index property');
        _this.dbg = defs_1.logger.extend("record:" + _this.index);
        _this._running = false;
        _this.left = _this.maximumLength !== defs_1.PA_NO_VALUE ? _this.maximumLength : null;
        return _this;
    }
    RecordStream.prototype._onEvent = function (event) {
        this.dbg("" + event.type);
        this.emit(event.type, event);
        if (event.type === 'event')
            this.emit(event.type + "." + event.event, event);
        // Destroy the stream if the corresponding object gets killed on PulseAudio
        // server
        if (event.type === 'killed')
            this.destroy(new Error("Stream killed on PulseAudio server"));
    };
    RecordStream.prototype._onData = function (packet) {
        if (!this._running)
            return;
        // MemoryBlock objects received from PulseAudio will always have exactly one
        // block in the body array.
        if (packet.body.length !== 1)
            throw new Error('Unexpected number of body blocks in a MemoryBuffer');
        var data = packet.body[0];
        if (this.left !== null && this.left < data.length)
            data = data.slice(0, this.left);
        if (!this.push(data)) {
            this.dbg("Data overrun, dropping data from PulseAudio");
            this.emit('overrun');
            this._running = false;
        }
        if (this.left !== null) {
            this.left -= data.length;
            if (!this.left) {
                this._running = false;
                this.push(null);
            }
        }
    };
    RecordStream.prototype._read = function () {
        this._running = true;
    };
    RecordStream.prototype._destroy = function (err, callback) {
        return __awaiter(this, void 0, void 0, function () {
            var error_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this._running = false;
                        this.dbg("destroying...");
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.pa._invoke(new command_1.SelectByIndex(command_1.PA_COMMAND.DELETE_RECORD_STREAM, this.index))];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 3:
                        error_4 = _a.sent();
                        // For some reason, PulseAudio returns the wrong error code PA_ERR_EXIST
                        // when the stream being deleted does not exist, so we need to check both
                        // error codes here.
                        if (!(error_4.code === error_1.PA_ERR.NOENTITY || error_4.code === error_1.PA_ERR.EXIST)) {
                            this.dbg("destroy error: " + error_4);
                            err = error_4;
                        }
                        return [3 /*break*/, 5];
                    case 4:
                        this.dbg("destroyed");
                        this.push(null);
                        callback(err);
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    return RecordStream;
}(stream_1.Readable));
exports.RecordStream = RecordStream;
