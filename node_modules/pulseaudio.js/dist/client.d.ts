/// <reference types="node" />
import { EventEmitter } from 'events';
import { Props } from './props';
import { PlaybackStream, RecordStream, UploadStream } from './stream';
import { Command } from './command';
import * as Cmd from './command';
export declare function getDefaultAppProps(appName?: string): Promise<Props>;
export declare class PulseAudio extends EventEmitter {
    eventName: RegExp;
    streams: {
        playback: {
            [index: number]: PlaybackStream;
        };
        record: {
            [index: number]: RecordStream;
        };
        upload: {
            [index: number]: UploadStream;
        };
    };
    getAppProps: () => Promise<Props> | Props;
    eventListeners: number;
    sockPath: string;
    cookie: Buffer | undefined;
    requests: any;
    packetLength: number | null;
    sock: any;
    protocol: number;
    _disconnecting?: {
        resolve: (value?: unknown) => void;
        reject: (reason: Error) => void;
    };
    header: Buffer | null;
    constructor(appProps?: string | Props | (() => Promise<Props> | Props), cookie?: Buffer, sockPath?: string);
    _newListener(event: string): void;
    _removeListener(event: string): void;
    connect(clientProps?: Props | (() => Promise<Props> | Props)): Promise<void>;
    disconnect(): Promise<unknown>;
    _closed(): void;
    _abort(error: Error): void;
    _parse(header: Buffer, body: Buffer): void;
    _read(): void;
    _invoke(cmd: Command): Promise<Command>;
    _authenticate(...args: ConstructorParameters<typeof Cmd.Auth>): Promise<number>;
    _subscribe(...args: ConstructorParameters<typeof Cmd.Subscribe>): Promise<void>;
    setClientProperties(...args: ConstructorParameters<typeof Cmd.SetClientName>): Promise<number>;
    getServerInfo(...args: ConstructorParameters<typeof Cmd.GetServerInfo>): Promise<Cmd.ServerInfo>;
    loadModule(...args: ConstructorParameters<typeof Cmd.LoadModule>): Promise<number>;
    unloadModule(index: number): Promise<void>;
    getAllSources(): Promise<Record<string, unknown>[]>;
    getAllSinks(): Promise<Record<string, unknown>[]>;
    setDefaultSource(name: string): Promise<void>;
    lookupSource(name?: string): Promise<number>;
    getSourceInfo(nameOrIndex?: string | number): Promise<any>;
    setSourceVolume(volumes: number | number[], nameOrIndex?: string | number): Promise<void>;
    setSourceMute(mute: boolean, nameOrIndex?: string | number): Promise<void>;
    setSourceOutputVolume(index: number, volumes: number | number[]): Promise<void>;
    setSourceOutputMute(index: number, mute: boolean): Promise<void>;
    getSourceOutputInfo(...args: ConstructorParameters<typeof Cmd.GetSourceOutputInfo>): Promise<{
        index: number;
        name: string | null;
        module: number;
        client: number;
        source: number;
        sampleSpec: import("./packet").SampleSpec;
        channelMap: number[];
        latency: {
            minimum: bigint;
            maximum: bigint;
        };
        resampleMethod: string | null;
        driver: string | null;
        properties: Props;
        corked: boolean;
        volume: number[];
        muted: boolean;
        hasVolume: boolean;
        writableVolume: boolean;
        formatInfo: {
            encoding: number;
            properties: Props;
        };
    }>;
    getSourceOutputList(): Promise<Record<string, unknown>[]>;
    moveSourceOutput(index: number, source: number | string): Promise<void>;
    createRecordStream(...args: ConstructorParameters<typeof Cmd.CreateRecordStream>): Promise<RecordStream>;
    setDefaultSink(name: string): Promise<void>;
    lookupSink(name?: string): Promise<number>;
    getSinkInfo(nameOrIndex?: string | number): Promise<any>;
    setSinkVolume(volumes: number | number[], nameOrIndex?: string | number): Promise<void>;
    setSinkMute(mute: boolean, nameOrIndex?: string | number): Promise<void>;
    setSinkInputVolume(index: number, volumes: number | number[]): Promise<void>;
    setSinkInputMute(index: number, mute: boolean): Promise<void>;
    getSinkInputInfo(...args: ConstructorParameters<typeof Cmd.GetSinkInputInfo>): Promise<{
        index: number;
        name: string | null;
        module: number;
        client: number;
        sink: number;
        sampleSpec: import("./packet").SampleSpec;
        channelMap: number[];
        volume: number[];
        latency: {
            minimum: bigint;
            maximum: bigint;
        };
        resampleMethod: string | null;
        driver: string | null;
        muted: boolean;
        properties: Props;
        corked: boolean;
        hasVolume: boolean;
        writableVolume: boolean;
        formatInfo: {
            encoding: number;
            properties: Props;
        };
    }>;
    getSinkInputList(): Promise<Record<string, unknown>[]>;
    moveSinkInput(index: number, sink: number | string): Promise<void>;
    createPlaybackStream(opts?: any): Promise<PlaybackStream>;
    createUploadStream(...args: ConstructorParameters<typeof Cmd.CreateUploadStream>): Promise<UploadStream>;
    playSample(...args: ConstructorParameters<typeof Cmd.PlaySample>): Promise<number>;
    removeSample(name: string): Promise<void>;
    getClients(): Promise<Record<string, unknown>[]>;
}
