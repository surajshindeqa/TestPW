"use strict";
// Copyright (c) 2019-2021 Jan Janak <jan@janakj.org>
//
// Permission to use, copy, modify, and/or distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
Object.defineProperty(exports, "__esModule", { value: true });
exports.PA_SAMPLE_FORMAT = exports.PA_SOURCE_FLAGS = exports.PA_SINK_FLAGS = exports.cookieFile = exports.defaultSockPath = exports.PA_NATIVE_PROTOCOL_VERSION = exports.PA_NATIVE_COOKIE_LENGTH = exports.PA_NO_TAG = exports.PA_NO_INDEX = exports.PA_NO_VALUE = exports.PA_DEFAULT_SINK = exports.PA_DEFAULT_SOURCE = exports.PA_MAX_CHANNELS = exports.logger = void 0;
var debug_1 = require("debug");
var os_1 = require("os");
exports.logger = (0, debug_1.default)('pa');
exports.PA_MAX_CHANNELS = 32;
exports.PA_DEFAULT_SOURCE = '@DEFAULT_SOURCE@';
exports.PA_DEFAULT_SINK = '@DEFAULT_SINK@';
exports.PA_NO_VALUE = 0xffffffff;
exports.PA_NO_INDEX = exports.PA_NO_VALUE;
exports.PA_NO_TAG = exports.PA_NO_VALUE;
exports.PA_NATIVE_COOKIE_LENGTH = 256;
// The minimal PulseAudio native protocol version required by this client.
exports.PA_NATIVE_PROTOCOL_VERSION = 32;
exports.defaultSockPath = "/run/user/" + process.getuid() + "/pulse/native";
exports.cookieFile = (0, os_1.homedir)() + "/.config/pulse/cookie";
// Must match pulse/def.h
var PA_SINK_FLAGS;
(function (PA_SINK_FLAGS) {
    PA_SINK_FLAGS[PA_SINK_FLAGS["NOFLAGS"] = 0] = "NOFLAGS";
    PA_SINK_FLAGS[PA_SINK_FLAGS["HW_VOLUME_CTRL"] = 1] = "HW_VOLUME_CTRL";
    PA_SINK_FLAGS[PA_SINK_FLAGS["LATENCY"] = 2] = "LATENCY";
    PA_SINK_FLAGS[PA_SINK_FLAGS["HARDWARE"] = 4] = "HARDWARE";
    PA_SINK_FLAGS[PA_SINK_FLAGS["NETWORK"] = 8] = "NETWORK";
    PA_SINK_FLAGS[PA_SINK_FLAGS["HW_MUTE_CTRL"] = 16] = "HW_MUTE_CTRL";
    PA_SINK_FLAGS[PA_SINK_FLAGS["DECIBEL_VOLUME"] = 32] = "DECIBEL_VOLUME";
    PA_SINK_FLAGS[PA_SINK_FLAGS["FLAT_VOLUME"] = 64] = "FLAT_VOLUME";
    PA_SINK_FLAGS[PA_SINK_FLAGS["DYNAMIC_LATENCY"] = 128] = "DYNAMIC_LATENCY";
    PA_SINK_FLAGS[PA_SINK_FLAGS["SET_FORMATS"] = 256] = "SET_FORMATS"; // The sink allows setting what formats are supported by the connected hardware. The actual functionality to do this might be provided by an extension. \since 1.0
})(PA_SINK_FLAGS = exports.PA_SINK_FLAGS || (exports.PA_SINK_FLAGS = {}));
var PA_SOURCE_FLAGS;
(function (PA_SOURCE_FLAGS) {
    PA_SOURCE_FLAGS[PA_SOURCE_FLAGS["NOFLAGS"] = 0] = "NOFLAGS";
    PA_SOURCE_FLAGS[PA_SOURCE_FLAGS["HW_VOLUME_CTRL"] = 1] = "HW_VOLUME_CTRL";
    PA_SOURCE_FLAGS[PA_SOURCE_FLAGS["LATENCY"] = 2] = "LATENCY";
    PA_SOURCE_FLAGS[PA_SOURCE_FLAGS["HARDWARE"] = 4] = "HARDWARE";
    PA_SOURCE_FLAGS[PA_SOURCE_FLAGS["NETWORK"] = 8] = "NETWORK";
    PA_SOURCE_FLAGS[PA_SOURCE_FLAGS["HW_MUTE_CTRL"] = 16] = "HW_MUTE_CTRL";
    PA_SOURCE_FLAGS[PA_SOURCE_FLAGS["DECIBEL_VOLUME"] = 32] = "DECIBEL_VOLUME";
    PA_SOURCE_FLAGS[PA_SOURCE_FLAGS["DYNAMIC_LATENCY"] = 64] = "DYNAMIC_LATENCY";
    PA_SOURCE_FLAGS[PA_SOURCE_FLAGS["FLAT_VOLUME"] = 128] = "FLAT_VOLUME"; // This source is in flat volume mode, i.e.\ always the maximum of the volume of all connected outputs. \since 1.0
})(PA_SOURCE_FLAGS = exports.PA_SOURCE_FLAGS || (exports.PA_SOURCE_FLAGS = {}));
var PA_SAMPLE_FORMAT;
(function (PA_SAMPLE_FORMAT) {
    PA_SAMPLE_FORMAT[PA_SAMPLE_FORMAT["U8"] = 0] = "U8";
    PA_SAMPLE_FORMAT[PA_SAMPLE_FORMAT["ALAW"] = 1] = "ALAW";
    PA_SAMPLE_FORMAT[PA_SAMPLE_FORMAT["ULAW"] = 2] = "ULAW";
    PA_SAMPLE_FORMAT[PA_SAMPLE_FORMAT["S16LE"] = 3] = "S16LE";
    PA_SAMPLE_FORMAT[PA_SAMPLE_FORMAT["S16BE"] = 4] = "S16BE";
    PA_SAMPLE_FORMAT[PA_SAMPLE_FORMAT["FLOAT32LE"] = 5] = "FLOAT32LE";
    PA_SAMPLE_FORMAT[PA_SAMPLE_FORMAT["FLOAT32BE"] = 6] = "FLOAT32BE";
    PA_SAMPLE_FORMAT[PA_SAMPLE_FORMAT["S32LE"] = 7] = "S32LE";
    PA_SAMPLE_FORMAT[PA_SAMPLE_FORMAT["S32BE"] = 8] = "S32BE";
    PA_SAMPLE_FORMAT[PA_SAMPLE_FORMAT["S24LE"] = 9] = "S24LE";
    PA_SAMPLE_FORMAT[PA_SAMPLE_FORMAT["S24BE"] = 10] = "S24BE";
    PA_SAMPLE_FORMAT[PA_SAMPLE_FORMAT["S24_32LE"] = 11] = "S24_32LE";
    PA_SAMPLE_FORMAT[PA_SAMPLE_FORMAT["S24_32BE"] = 12] = "S24_32BE"; // Signed 24 Bit PCM in LSB of 32 Bit words, big endian. \since 0.9.15
})(PA_SAMPLE_FORMAT = exports.PA_SAMPLE_FORMAT || (exports.PA_SAMPLE_FORMAT = {}));
