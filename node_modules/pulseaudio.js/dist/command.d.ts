/// <reference types="node" />
import { TagStruct, SampleSpec } from './packet';
import { Props } from './props';
import { RecordStream, UploadStream, PlaybackStream } from './stream';
import type { PulseAudio } from './client';
export declare enum PA_COMMAND {
    ERROR = 0,
    TIMEOUT = 1,
    REPLY = 2,
    CREATE_PLAYBACK_STREAM = 3,
    DELETE_PLAYBACK_STREAM = 4,
    CREATE_RECORD_STREAM = 5,
    DELETE_RECORD_STREAM = 6,
    EXIT = 7,
    AUTH = 8,
    SET_CLIENT_NAME = 9,
    LOOKUP_SINK = 10,
    LOOKUP_SOURCE = 11,
    DRAIN_PLAYBACK_STREAM = 12,
    STAT = 13,
    GET_PLAYBACK_LATENCY = 14,
    CREATE_UPLOAD_STREAM = 15,
    DELETE_UPLOAD_STREAM = 16,
    FINISH_UPLOAD_STREAM = 17,
    PLAY_SAMPLE = 18,
    REMOVE_SAMPLE = 19,
    GET_SERVER_INFO = 20,
    GET_SINK_INFO = 21,
    GET_SINK_INFO_LIST = 22,
    GET_SOURCE_INFO = 23,
    GET_SOURCE_INFO_LIST = 24,
    GET_MODULE_INFO = 25,
    GET_MODULE_INFO_LIST = 26,
    GET_CLIENT_INFO = 27,
    GET_CLIENT_INFO_LIST = 28,
    GET_SINK_INPUT_INFO = 29,
    GET_SINK_INPUT_INFO_LIST = 30,
    GET_SOURCE_OUTPUT_INFO = 31,
    GET_SOURCE_OUTPUT_INFO_LIST = 32,
    GET_SAMPLE_INFO = 33,
    GET_SAMPLE_INFO_LIST = 34,
    SUBSCRIBE = 35,
    SET_SINK_VOLUME = 36,
    SET_SINK_INPUT_VOLUME = 37,
    SET_SOURCE_VOLUME = 38,
    SET_SINK_MUTE = 39,
    SET_SOURCE_MUTE = 40,
    CORK_PLAYBACK_STREAM = 41,
    FLUSH_PLAYBACK_STREAM = 42,
    TRIGGER_PLAYBACK_STREAM = 43,
    SET_DEFAULT_SINK = 44,
    SET_DEFAULT_SOURCE = 45,
    SET_PLAYBACK_STREAM_NAME = 46,
    SET_RECORD_STREAM_NAME = 47,
    KILL_CLIENT = 48,
    KILL_SINK_INPUT = 49,
    KILL_SOURCE_OUTPUT = 50,
    LOAD_MODULE = 51,
    UNLOAD_MODULE = 52,
    ADD_AUTOLOAD___OBSOLETE = 53,
    REMOVE_AUTOLOAD___OBSOLETE = 54,
    GET_AUTOLOAD_INFO___OBSOLETE = 55,
    GET_AUTOLOAD_INFO_LIST___OBSOLETE = 56,
    GET_RECORD_LATENCY = 57,
    CORK_RECORD_STREAM = 58,
    FLUSH_RECORD_STREAM = 59,
    PREBUF_PLAYBACK_STREAM = 60,
    REQUEST = 61,
    OVERFLOW = 62,
    UNDERFLOW = 63,
    PLAYBACK_STREAM_KILLED = 64,
    RECORD_STREAM_KILLED = 65,
    SUBSCRIBE_EVENT = 66,
    MOVE_SINK_INPUT = 67,
    MOVE_SOURCE_OUTPUT = 68,
    SET_SINK_INPUT_MUTE = 69,
    SUSPEND_SINK = 70,
    SUSPEND_SOURCE = 71,
    SET_PLAYBACK_STREAM_BUFFER_ATTR = 72,
    SET_RECORD_STREAM_BUFFER_ATTR = 73,
    UPDATE_PLAYBACK_STREAM_SAMPLE_RATE = 74,
    UPDATE_RECORD_STREAM_SAMPLE_RATE = 75,
    PLAYBACK_STREAM_SUSPENDED = 76,
    RECORD_STREAM_SUSPENDED = 77,
    PLAYBACK_STREAM_MOVED = 78,
    RECORD_STREAM_MOVED = 79,
    UPDATE_RECORD_STREAM_PROPLIST = 80,
    UPDATE_PLAYBACK_STREAM_PROPLIST = 81,
    UPDATE_CLIENT_PROPLIST = 82,
    REMOVE_RECORD_STREAM_PROPLIST = 83,
    REMOVE_PLAYBACK_STREAM_PROPLIST = 84,
    REMOVE_CLIENT_PROPLIST = 85,
    STARTED = 86,
    EXTENSION = 87,
    GET_CARD_INFO = 88,
    GET_CARD_INFO_LIST = 89,
    SET_CARD_PROFILE = 90,
    CLIENT_EVENT = 91,
    PLAYBACK_STREAM_EVENT = 92,
    RECORD_STREAM_EVENT = 93,
    PLAYBACK_BUFFER_ATTR_CHANGED = 94,
    RECORD_BUFFER_ATTR_CHANGED = 95,
    SET_SINK_PORT = 96,
    SET_SOURCE_PORT = 97,
    SET_SOURCE_OUTPUT_VOLUME = 98,
    SET_SOURCE_OUTPUT_MUTE = 99,
    SET_PORT_LATENCY_OFFSET = 100,
    ENABLE_SRBCHANNEL = 101,
    DISABLE_SRBCHANNEL = 102,
    REGISTER_MEMFD_SHMID = 103,
    MAX = 104
}
export declare class Command extends TagStruct {
    type: any;
    tag: number;
    constructor(cmdOrBody: Buffer | number, header?: Buffer | null);
}
export declare class Auth extends Command {
    static PA_PROTOCOL_VERSION_MASK: number;
    constructor(cookie?: Buffer, proto?: number);
    processResponse(packet: TagStruct): number;
}
export declare class SetClientName extends Command {
    constructor(nameOrProps: string | Props);
    processResponse(packet: TagStruct): number;
}
export interface ServerInfo {
    name: string;
    version: string;
    username: string;
    hostname: string;
    sampleSpec: SampleSpec;
    defaultSink: string;
    defaultSource: string;
    cookie: number;
    defaultChannelMap: number[];
}
export declare class GetServerInfo extends Command {
    constructor();
    processResponse(packet: TagStruct): ServerInfo;
}
export declare class SelectByIndex extends Command {
    constructor(cmd: PA_COMMAND, index: number);
}
export declare class SelectByName extends Command {
    constructor(cmd: PA_COMMAND, name: string | null);
}
export declare class SelectByNameOrIndex extends SelectByIndex {
    constructor(cmd: PA_COMMAND, nameOrIndex: number | string | null);
}
export declare class SetVolume extends SelectByNameOrIndex {
    constructor(cmd: PA_COMMAND, nameOrIndex: number | string | null, volumes: number | number[]);
}
export declare class SetVolumeByIndex extends SelectByIndex {
    constructor(cmd: PA_COMMAND, index: number, volumes: number | number[]);
}
export declare class SetMute extends SelectByNameOrIndex {
    constructor(cmd: PA_COMMAND, nameOrIndex: number | string | null, mute: boolean);
}
export declare class SetMuteByIndex extends SelectByIndex {
    constructor(cmd: PA_COMMAND, index: number, mute: boolean);
}
export declare class Lookup extends SelectByName {
    processResponse(packet: TagStruct): number;
}
export declare class GetSourceSinkInfo extends SelectByNameOrIndex {
    processResponse(packet: TagStruct): any;
}
export declare class GetSourceSinkInfoList extends Command {
    processResponse(packet: TagStruct): Record<string, unknown>[];
}
export declare class LoadModule extends SelectByName {
    static argsToString(args: Record<string, unknown>): string;
    constructor(name: string, args?: Record<string, unknown>);
    processResponse(packet: TagStruct): number;
}
export declare class PlaySample extends SelectByNameOrIndex {
    static defaults: {
        volume: number;
        sink: string;
        properties: {};
    };
    constructor(name: string, opts?: any);
    processResponse(packet: TagStruct): number;
}
export declare class Subscribe extends Command {
    constructor(mask: number);
}
export declare class GetSinkInputInfo extends SelectByIndex {
    constructor(index: number);
    processResponse(packet: TagStruct): {
        index: number;
        name: string | null;
        module: number;
        client: number;
        sink: number;
        sampleSpec: SampleSpec;
        channelMap: number[];
        volume: number[];
        latency: {
            minimum: bigint;
            maximum: bigint;
        };
        resampleMethod: string | null;
        driver: string | null;
        muted: boolean;
        properties: Props;
        corked: boolean;
        hasVolume: boolean;
        writableVolume: boolean;
        formatInfo: {
            encoding: number;
            properties: Props;
        };
    };
}
export declare class GetSourceOutputInfo extends SelectByIndex {
    constructor(index: number);
    processResponse(packet: TagStruct): {
        index: number;
        name: string | null;
        module: number;
        client: number;
        source: number;
        sampleSpec: SampleSpec;
        channelMap: number[];
        latency: {
            minimum: bigint;
            maximum: bigint;
        };
        resampleMethod: string | null;
        driver: string | null;
        properties: Props;
        corked: boolean;
        volume: number[];
        muted: boolean;
        hasVolume: boolean;
        writableVolume: boolean;
        formatInfo: {
            encoding: number;
            properties: Props;
        };
    };
}
declare type StreamType = "upload" | "playback" | "record";
declare class CreateStream extends Command {
    static cmdToType(cmd: PA_COMMAND): StreamType;
    constructor(cmd: PA_COMMAND);
    static parseOpts(opts: any, defaults?: {}): any;
    _addFormats(formats: [any]): void;
}
export declare class CreatePlaybackStream extends CreateStream {
    opts: any;
    static defaults: {
        sampleSpec: null;
        channelMap: null;
        index: number;
        name: null;
        maximumLength: number;
        corked: boolean;
        properties: {};
        targetLength: number;
        preBuffering: number;
        minimumRequest: number;
        volume: null;
        noRemap: boolean;
        noRemix: boolean;
        fixFormat: boolean;
        fixRate: boolean;
        fixChannels: boolean;
        noMove: boolean;
        variableRate: boolean;
        muted: boolean;
        adjustLatency: boolean;
        volumeSet: boolean;
        earlyRequests: boolean;
        mutedSet: boolean;
        dontInhibitAutoSuspend: boolean;
        failOnSuspend: boolean;
        relativeVolume: boolean;
        passthrough: boolean;
        formats: never[];
    };
    constructor(opts?: any, cmd?: PA_COMMAND);
    processResponse(packet: TagStruct, pulseaudio: PulseAudio): PlaybackStream;
}
export declare class CreateUploadStream extends CreateStream {
    opts: any;
    static defaults: {
        name: null;
        sampleSpec: null;
        channelMap: null;
        maximumLength: null;
        properties: {};
    };
    constructor(opts?: any);
    processResponse(packet: TagStruct, pulseaudio: PulseAudio): UploadStream;
}
export declare class CreateRecordStream extends CreateStream {
    opts: any;
    static defaults: {
        sampleSpec: null;
        channelMap: null;
        index: number;
        name: null;
        maximumLength: number;
        corked: boolean;
        fragmentSize: number;
        noRemap: boolean;
        noRemix: boolean;
        fixFormat: boolean;
        fixRate: boolean;
        fixChannels: boolean;
        noMove: boolean;
        variableRate: boolean;
        peakDetect: boolean;
        adjustLatency: boolean;
        properties: {};
        directOnInputIndex: number;
        earlyRequests: boolean;
        dontInhibitAutoSuspend: boolean;
        failOnSuspend: boolean;
        formats: never[];
        volume: null;
        muted: boolean;
        volumeSet: boolean;
        mutedSet: boolean;
        relativeVolume: boolean;
        passthrough: boolean;
    };
    constructor(opts?: any);
    processResponse(packet: TagStruct, pulseaudio: PulseAudio): RecordStream;
}
export declare class GetClientsList extends Command {
    processResponse(packet: TagStruct): Record<string, unknown>[];
}
export declare class GetSinkInputList extends Command {
    processResponse(packet: TagStruct): Record<string, unknown>[];
}
export declare class GetSourceOutputList extends Command {
    processResponse(packet: TagStruct): Record<string, unknown>[];
}
export declare class Move extends SelectByIndex {
    constructor(cmd: PA_COMMAND, index: number, inputOrOutput: number | string);
}
export {};
